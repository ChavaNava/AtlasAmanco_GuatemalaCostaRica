'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DataUsuarios
    Inherits DataSet
    
    Private tableMCPC_Planta As MCPC_PlantaDataTable
    
    Private tableMCPC_Usuario As MCPC_UsuarioDataTable
    
    Private relationMCPC_UsuarioMCPC_Planta As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("MCPC_Planta")) Is Nothing) Then
                Me.Tables.Add(New MCPC_PlantaDataTable(ds.Tables("MCPC_Planta")))
            End If
            If (Not (ds.Tables("MCPC_Usuario")) Is Nothing) Then
                Me.Tables.Add(New MCPC_UsuarioDataTable(ds.Tables("MCPC_Usuario")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MCPC_Planta As MCPC_PlantaDataTable
        Get
            Return Me.tableMCPC_Planta
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MCPC_Usuario As MCPC_UsuarioDataTable
        Get
            Return Me.tableMCPC_Usuario
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DataUsuarios = CType(MyBase.Clone,DataUsuarios)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("MCPC_Planta")) Is Nothing) Then
            Me.Tables.Add(New MCPC_PlantaDataTable(ds.Tables("MCPC_Planta")))
        End If
        If (Not (ds.Tables("MCPC_Usuario")) Is Nothing) Then
            Me.Tables.Add(New MCPC_UsuarioDataTable(ds.Tables("MCPC_Usuario")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableMCPC_Planta = CType(Me.Tables("MCPC_Planta"),MCPC_PlantaDataTable)
        If (Not (Me.tableMCPC_Planta) Is Nothing) Then
            Me.tableMCPC_Planta.InitVars
        End If
        Me.tableMCPC_Usuario = CType(Me.Tables("MCPC_Usuario"),MCPC_UsuarioDataTable)
        If (Not (Me.tableMCPC_Usuario) Is Nothing) Then
            Me.tableMCPC_Usuario.InitVars
        End If
        Me.relationMCPC_UsuarioMCPC_Planta = Me.Relations("MCPC_UsuarioMCPC_Planta")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataUsuarios"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DataUsuarios.xsd"
        Me.Locale = New System.Globalization.CultureInfo("es-MX")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableMCPC_Planta = New MCPC_PlantaDataTable
        Me.Tables.Add(Me.tableMCPC_Planta)
        Me.tableMCPC_Usuario = New MCPC_UsuarioDataTable
        Me.Tables.Add(Me.tableMCPC_Usuario)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("MCPC_UsuarioMCPC_Planta", New DataColumn() {Me.tableMCPC_Usuario.PlantaColumn}, New DataColumn() {Me.tableMCPC_Planta.PlantaColumn})
        Me.tableMCPC_Planta.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationMCPC_UsuarioMCPC_Planta = New DataRelation("MCPC_UsuarioMCPC_Planta", New DataColumn() {Me.tableMCPC_Usuario.PlantaColumn}, New DataColumn() {Me.tableMCPC_Planta.PlantaColumn}, false)
        Me.Relations.Add(Me.relationMCPC_UsuarioMCPC_Planta)
    End Sub
    
    Private Function ShouldSerializeMCPC_Planta() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMCPC_Usuario() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub MCPC_PlantaRowChangeEventHandler(ByVal sender As Object, ByVal e As MCPC_PlantaRowChangeEvent)
    
    Public Delegate Sub MCPC_UsuarioRowChangeEventHandler(ByVal sender As Object, ByVal e As MCPC_UsuarioRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MCPC_PlantaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPlanta As DataColumn
        
        Private columnMunicipio As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Private columnNombre_Corto As DataColumn
        
        Friend Sub New()
            MyBase.New("MCPC_Planta")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property PlantaColumn As DataColumn
            Get
                Return Me.columnPlanta
            End Get
        End Property
        
        Friend ReadOnly Property MunicipioColumn As DataColumn
            Get
                Return Me.columnMunicipio
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Friend ReadOnly Property Nombre_CortoColumn As DataColumn
            Get
                Return Me.columnNombre_Corto
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MCPC_PlantaRow
            Get
                Return CType(Me.Rows(index),MCPC_PlantaRow)
            End Get
        End Property
        
        Public Event MCPC_PlantaRowChanged As MCPC_PlantaRowChangeEventHandler
        
        Public Event MCPC_PlantaRowChanging As MCPC_PlantaRowChangeEventHandler
        
        Public Event MCPC_PlantaRowDeleted As MCPC_PlantaRowChangeEventHandler
        
        Public Event MCPC_PlantaRowDeleting As MCPC_PlantaRowChangeEventHandler
        
        Public Overloads Sub AddMCPC_PlantaRow(ByVal row As MCPC_PlantaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMCPC_PlantaRow(ByVal parentMCPC_UsuarioRowByMCPC_UsuarioMCPC_Planta As MCPC_UsuarioRow, ByVal Municipio As Decimal, ByVal Descripcion As String, ByVal Nombre_Corto As String) As MCPC_PlantaRow
            Dim rowMCPC_PlantaRow As MCPC_PlantaRow = CType(Me.NewRow,MCPC_PlantaRow)
            rowMCPC_PlantaRow.ItemArray = New Object() {parentMCPC_UsuarioRowByMCPC_UsuarioMCPC_Planta(1), Municipio, Descripcion, Nombre_Corto}
            Me.Rows.Add(rowMCPC_PlantaRow)
            Return rowMCPC_PlantaRow
        End Function
        
        Public Function FindByPlanta(ByVal Planta As Decimal) As MCPC_PlantaRow
            Return CType(Me.Rows.Find(New Object() {Planta}),MCPC_PlantaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MCPC_PlantaDataTable = CType(MyBase.Clone,MCPC_PlantaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MCPC_PlantaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPlanta = Me.Columns("Planta")
            Me.columnMunicipio = Me.Columns("Municipio")
            Me.columnDescripcion = Me.Columns("Descripcion")
            Me.columnNombre_Corto = Me.Columns("Nombre_Corto")
        End Sub
        
        Private Sub InitClass()
            Me.columnPlanta = New DataColumn("Planta", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPlanta)
            Me.columnMunicipio = New DataColumn("Municipio", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMunicipio)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.columnNombre_Corto = New DataColumn("Nombre_Corto", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre_Corto)
            Me.Constraints.Add(New UniqueConstraint("DataUsuariosKey1", New DataColumn() {Me.columnPlanta}, true))
            Me.columnPlanta.AllowDBNull = false
            Me.columnPlanta.Unique = true
        End Sub
        
        Public Function NewMCPC_PlantaRow() As MCPC_PlantaRow
            Return CType(Me.NewRow,MCPC_PlantaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MCPC_PlantaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MCPC_PlantaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MCPC_PlantaRowChangedEvent) Is Nothing) Then
                RaiseEvent MCPC_PlantaRowChanged(Me, New MCPC_PlantaRowChangeEvent(CType(e.Row,MCPC_PlantaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MCPC_PlantaRowChangingEvent) Is Nothing) Then
                RaiseEvent MCPC_PlantaRowChanging(Me, New MCPC_PlantaRowChangeEvent(CType(e.Row,MCPC_PlantaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MCPC_PlantaRowDeletedEvent) Is Nothing) Then
                RaiseEvent MCPC_PlantaRowDeleted(Me, New MCPC_PlantaRowChangeEvent(CType(e.Row,MCPC_PlantaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MCPC_PlantaRowDeletingEvent) Is Nothing) Then
                RaiseEvent MCPC_PlantaRowDeleting(Me, New MCPC_PlantaRowChangeEvent(CType(e.Row,MCPC_PlantaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMCPC_PlantaRow(ByVal row As MCPC_PlantaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MCPC_PlantaRow
        Inherits DataRow
        
        Private tableMCPC_Planta As MCPC_PlantaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMCPC_Planta = CType(Me.Table,MCPC_PlantaDataTable)
        End Sub
        
        Public Property Planta As Decimal
            Get
                Return CType(Me(Me.tableMCPC_Planta.PlantaColumn),Decimal)
            End Get
            Set
                Me(Me.tableMCPC_Planta.PlantaColumn) = value
            End Set
        End Property
        
        Public Property Municipio As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMCPC_Planta.MunicipioColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMCPC_Planta.MunicipioColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Try 
                    Return CType(Me(Me.tableMCPC_Planta.DescripcionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMCPC_Planta.DescripcionColumn) = value
            End Set
        End Property
        
        Public Property Nombre_Corto As String
            Get
                Try 
                    Return CType(Me(Me.tableMCPC_Planta.Nombre_CortoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMCPC_Planta.Nombre_CortoColumn) = value
            End Set
        End Property
        
        Public Property MCPC_UsuarioRow As MCPC_UsuarioRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("MCPC_UsuarioMCPC_Planta")),MCPC_UsuarioRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("MCPC_UsuarioMCPC_Planta"))
            End Set
        End Property
        
        Public Function IsMunicipioNull() As Boolean
            Return Me.IsNull(Me.tableMCPC_Planta.MunicipioColumn)
        End Function
        
        Public Sub SetMunicipioNull()
            Me(Me.tableMCPC_Planta.MunicipioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableMCPC_Planta.DescripcionColumn)
        End Function
        
        Public Sub SetDescripcionNull()
            Me(Me.tableMCPC_Planta.DescripcionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNombre_CortoNull() As Boolean
            Return Me.IsNull(Me.tableMCPC_Planta.Nombre_CortoColumn)
        End Function
        
        Public Sub SetNombre_CortoNull()
            Me(Me.tableMCPC_Planta.Nombre_CortoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MCPC_PlantaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MCPC_PlantaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MCPC_PlantaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MCPC_PlantaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MCPC_UsuarioDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnUsuario As DataColumn
        
        Private columnPlanta As DataColumn
        
        Private columnTurno As DataColumn
        
        Private columnPuesto As DataColumn
        
        Private columnClave_Acceso As DataColumn
        
        Private columnNombre As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Friend Sub New()
            MyBase.New("MCPC_Usuario")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property UsuarioColumn As DataColumn
            Get
                Return Me.columnUsuario
            End Get
        End Property
        
        Friend ReadOnly Property PlantaColumn As DataColumn
            Get
                Return Me.columnPlanta
            End Get
        End Property
        
        Friend ReadOnly Property TurnoColumn As DataColumn
            Get
                Return Me.columnTurno
            End Get
        End Property
        
        Friend ReadOnly Property PuestoColumn As DataColumn
            Get
                Return Me.columnPuesto
            End Get
        End Property
        
        Friend ReadOnly Property Clave_AccesoColumn As DataColumn
            Get
                Return Me.columnClave_Acceso
            End Get
        End Property
        
        Friend ReadOnly Property NombreColumn As DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MCPC_UsuarioRow
            Get
                Return CType(Me.Rows(index),MCPC_UsuarioRow)
            End Get
        End Property
        
        Public Event MCPC_UsuarioRowChanged As MCPC_UsuarioRowChangeEventHandler
        
        Public Event MCPC_UsuarioRowChanging As MCPC_UsuarioRowChangeEventHandler
        
        Public Event MCPC_UsuarioRowDeleted As MCPC_UsuarioRowChangeEventHandler
        
        Public Event MCPC_UsuarioRowDeleting As MCPC_UsuarioRowChangeEventHandler
        
        Public Overloads Sub AddMCPC_UsuarioRow(ByVal row As MCPC_UsuarioRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMCPC_UsuarioRow(ByVal Usuario As String, ByVal Planta As Decimal, ByVal Turno As Decimal, ByVal Puesto As Decimal, ByVal Clave_Acceso As String, ByVal Nombre As String, ByVal Descripcion As String) As MCPC_UsuarioRow
            Dim rowMCPC_UsuarioRow As MCPC_UsuarioRow = CType(Me.NewRow,MCPC_UsuarioRow)
            rowMCPC_UsuarioRow.ItemArray = New Object() {Usuario, Planta, Turno, Puesto, Clave_Acceso, Nombre, Descripcion}
            Me.Rows.Add(rowMCPC_UsuarioRow)
            Return rowMCPC_UsuarioRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MCPC_UsuarioDataTable = CType(MyBase.Clone,MCPC_UsuarioDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MCPC_UsuarioDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnUsuario = Me.Columns("Usuario")
            Me.columnPlanta = Me.Columns("Planta")
            Me.columnTurno = Me.Columns("Turno")
            Me.columnPuesto = Me.Columns("Puesto")
            Me.columnClave_Acceso = Me.Columns("Clave_Acceso")
            Me.columnNombre = Me.Columns("Nombre")
            Me.columnDescripcion = Me.Columns("Descripcion")
        End Sub
        
        Private Sub InitClass()
            Me.columnUsuario = New DataColumn("Usuario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUsuario)
            Me.columnPlanta = New DataColumn("Planta", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPlanta)
            Me.columnTurno = New DataColumn("Turno", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTurno)
            Me.columnPuesto = New DataColumn("Puesto", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPuesto)
            Me.columnClave_Acceso = New DataColumn("Clave_Acceso", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClave_Acceso)
            Me.columnNombre = New DataColumn("Nombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnPlanta}, false))
            Me.columnUsuario.AllowDBNull = false
            Me.columnPlanta.Unique = true
        End Sub
        
        Public Function NewMCPC_UsuarioRow() As MCPC_UsuarioRow
            Return CType(Me.NewRow,MCPC_UsuarioRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MCPC_UsuarioRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MCPC_UsuarioRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MCPC_UsuarioRowChangedEvent) Is Nothing) Then
                RaiseEvent MCPC_UsuarioRowChanged(Me, New MCPC_UsuarioRowChangeEvent(CType(e.Row,MCPC_UsuarioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MCPC_UsuarioRowChangingEvent) Is Nothing) Then
                RaiseEvent MCPC_UsuarioRowChanging(Me, New MCPC_UsuarioRowChangeEvent(CType(e.Row,MCPC_UsuarioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MCPC_UsuarioRowDeletedEvent) Is Nothing) Then
                RaiseEvent MCPC_UsuarioRowDeleted(Me, New MCPC_UsuarioRowChangeEvent(CType(e.Row,MCPC_UsuarioRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MCPC_UsuarioRowDeletingEvent) Is Nothing) Then
                RaiseEvent MCPC_UsuarioRowDeleting(Me, New MCPC_UsuarioRowChangeEvent(CType(e.Row,MCPC_UsuarioRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMCPC_UsuarioRow(ByVal row As MCPC_UsuarioRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MCPC_UsuarioRow
        Inherits DataRow
        
        Private tableMCPC_Usuario As MCPC_UsuarioDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMCPC_Usuario = CType(Me.Table,MCPC_UsuarioDataTable)
        End Sub
        
        Public Property Usuario As String
            Get
                Return CType(Me(Me.tableMCPC_Usuario.UsuarioColumn),String)
            End Get
            Set
                Me(Me.tableMCPC_Usuario.UsuarioColumn) = value
            End Set
        End Property
        
        Public Property Planta As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMCPC_Usuario.PlantaColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMCPC_Usuario.PlantaColumn) = value
            End Set
        End Property
        
        Public Property Turno As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMCPC_Usuario.TurnoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMCPC_Usuario.TurnoColumn) = value
            End Set
        End Property
        
        Public Property Puesto As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMCPC_Usuario.PuestoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMCPC_Usuario.PuestoColumn) = value
            End Set
        End Property
        
        Public Property Clave_Acceso As String
            Get
                Try 
                    Return CType(Me(Me.tableMCPC_Usuario.Clave_AccesoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMCPC_Usuario.Clave_AccesoColumn) = value
            End Set
        End Property
        
        Public Property Nombre As String
            Get
                Try 
                    Return CType(Me(Me.tableMCPC_Usuario.NombreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMCPC_Usuario.NombreColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Try 
                    Return CType(Me(Me.tableMCPC_Usuario.DescripcionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMCPC_Usuario.DescripcionColumn) = value
            End Set
        End Property
        
        Public Function IsPlantaNull() As Boolean
            Return Me.IsNull(Me.tableMCPC_Usuario.PlantaColumn)
        End Function
        
        Public Sub SetPlantaNull()
            Me(Me.tableMCPC_Usuario.PlantaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTurnoNull() As Boolean
            Return Me.IsNull(Me.tableMCPC_Usuario.TurnoColumn)
        End Function
        
        Public Sub SetTurnoNull()
            Me(Me.tableMCPC_Usuario.TurnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPuestoNull() As Boolean
            Return Me.IsNull(Me.tableMCPC_Usuario.PuestoColumn)
        End Function
        
        Public Sub SetPuestoNull()
            Me(Me.tableMCPC_Usuario.PuestoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsClave_AccesoNull() As Boolean
            Return Me.IsNull(Me.tableMCPC_Usuario.Clave_AccesoColumn)
        End Function
        
        Public Sub SetClave_AccesoNull()
            Me(Me.tableMCPC_Usuario.Clave_AccesoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tableMCPC_Usuario.NombreColumn)
        End Function
        
        Public Sub SetNombreNull()
            Me(Me.tableMCPC_Usuario.NombreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableMCPC_Usuario.DescripcionColumn)
        End Function
        
        Public Sub SetDescripcionNull()
            Me(Me.tableMCPC_Usuario.DescripcionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetMCPC_PlantaRows() As MCPC_PlantaRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("MCPC_UsuarioMCPC_Planta")),MCPC_PlantaRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MCPC_UsuarioRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MCPC_UsuarioRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MCPC_UsuarioRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MCPC_UsuarioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
